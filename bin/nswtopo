#!/usr/bin/env ruby

# Copyright 2011-2022 Matthew Hollingworth
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

begin
  require 'open3'
  require 'optparse'
  require 'pathname'
  require 'etc'
  require 'yaml'
  require 'rdoc'
  require_relative '../lib/nswtopo.rb'
  require_relative '../lib/nswtopo/help_formatter.rb'

  extend NSWTopo::Log
  Thread::report_on_exception = false

  GDAL_VERSION = begin
    stdout, * = Open3.capture3 "gdalinfo", "--version"
    stdout[/\d+(?:\.\d+){1,2}/]
  rescue Errno::ENOENT
    log_abort "GDAL not installed"
  end

  case
  when (RUBY_VERSION.split(/\D+/).take(3).map(&:to_i) <=> [2,5]) < 0
    log_abort "ruby 2.5 or greater required"
  when !Zlib.const_defined?(:GzipFile)
    log_abort "ruby with GZIP_SUPPORT required"
  when (GDAL_VERSION.split(/\D+/).take(3).map(&:to_i) <=> [2,3]) < 0
    log_abort "GDAL 2.3 or greater required"
  end

  digits = '\d+(?:_\d+)*'
  float  = "[-+]?(?:#{digits}(?=(.)?)(?:\\.(?:#{digits})?)?|\\.#{digits})(?:[eE][-+]?#{digits})?"
  coords = "#{float},#{float}"
  field  = '[^\s",]+'

  PositiveInt   = /\A#{digits}\z/
  PositiveFloat = /\A#{float}\z/
  NonNegFloat   = 0..Float::INFINITY
  Dimensions    = /\A#{float},#{float}\z/
  Margins       = /\A#{float}(?:,#{float})?\z/
  CoordList     = /\A#{coords}(?:,#{coords})*\z/
  Rotation      = /\A(?:#{float}|magnetic|auto)\z/
  AltitudeAngle = 0..90
  Opacity       = /\A#{float}%?\z/
  DashArray     = /\A#{float}(?:(?:,#{float})*|(?: #{float})*)\z/
  Zoom          = /\A(?:#{digits},)?#{digits}\z/
  ZlibLevel     = /\A\d\z/
  FieldList     = /\A#{field}(?:,#{field})*\z/

  OptionParser.accept PositiveInt, PositiveInt do |string|
    raise OptionParser::InvalidArgument, string unless string.to_i.positive?
    string.to_i
  end

  OptionParser.accept PositiveFloat, PositiveFloat do |string|
    raise OptionParser::InvalidArgument, string unless string.to_f.positive?
    string.to_f
  end

  OptionParser.accept NonNegFloat, PositiveFloat do |string|
    raise OptionParser::InvalidArgument, string if string.to_f.negative?
    string.to_f
  end

  OptionParser.accept Dimensions, Dimensions do |string|
    dimensions = string.split(?,).map(&:to_f)
    raise OptionParser::InvalidArgument, string unless dimensions.all?(&:positive?)
    dimensions
  end

  OptionParser.accept Margins, Margins do |string|
    margins = string.split(?,).map(&:to_f)
    raise OptionParser::InvalidArgument, string if margins.any?(&:negative?)
    margins.one? ? margins * 2 : margins
  end

  OptionParser.accept CoordList, CoordList do |string|
    string.split(?,).map(&:to_f).each_slice(2).to_a
  end

  OptionParser.accept Rotation, Rotation do |string|
    "magnetic" == string ? string : "auto" == string ? string : string.to_f
  end

  OptionParser.accept AltitudeAngle, PositiveFloat do |string|
    raise OptionParser::InvalidArgument, string unless AltitudeAngle === string.to_f
    string.to_f
  end

  OptionParser.accept Pathname do |string|
    path = Pathname(string).expand_path
    raise OptionParser::InvalidArgument, string unless path.exist?
    path
  end

  OptionParser.accept Colour do |string|
    string == "none" ? string : Colour.new(string.downcase)
  rescue Colour::Error
    raise OptionParser::InvalidArgument, string
  end

  OptionParser.accept Opacity, Opacity do |string|
    opacity = string.end_with?(?%) ? Float(string.chomp ?%) * 0.01 : Float(string)
    raise OptionParser::InvalidArgument, string unless (0..1) === opacity
    opacity
  end

  OptionParser.accept DashArray, DashArray do |string|
    values = string.split(/[, ]/).map(&:to_f)
    raise OptionParser::InvalidArgument, string if values.any?(&:negative?)
    values.join ?\s
  end

  OptionParser.accept Zoom, Zoom do |string|
    values = string.split(?,).map(&:to_i)
    raise OptionParser::InvalidArgument, string unless values.all?(10..20)
    values
  end

  OptionParser.accept ZlibLevel, ZlibLevel do |string|
    Integer(string)
  end

  OptionParser.accept FieldList, FieldList do |string|
    string.split ?,
  end

  ansi = lambda do |string|
    string.to_s.gsub(/\*([-a-zA-Z0-9]+)\*/) do
      "\e[1m%s\e[0m" % $1
    end.gsub(/_([-a-zA-Z0-9]+)_/) do
      "\e[4m%s\e[0m" % $1
    end.gsub(/~([-a-zA-Z0-9]+)~/) do
      "\e[3m%s\e[0m" % $1
    end.prepend("\r\e[K")
  end

  plain = lambda do |string|
    string.to_s.gsub(/\*([-a-zA-Z0-9]+)\*/) { $1 }.gsub(/_([-a-zA-Z0-9]+)_/) { $1 }.gsub(/~([-a-zA-Z0-9]+)~/) { $1 }
  end

  base_parser = OptionParser.new do |parser|
    parser.separator "  options:"
    parser.banner = <<~EOF
      *nswtopo* - download and create vector topographic maps
        usage: _nswtopo_ [~options~] [<command> ...]
        commands:
          init          initialise map bounds and scale
          info          display map layers and metadata
          add           add named map layer
          contours      add contours from elevation data
          spot-heights  add spot heights from elevation data
          relief        add shaded relief
          grid          add UTM grid
          declination   add magnetic declination lines
          controls      add rogaine control markers
          overlay       add KML or GPX overlay
          delete        delete map layer
          render        render map in various formats
          layers        list available map layers
          config        configure nswtopo
        command help: _nswtopo_ <command> --help
    EOF
    parser.on "-v", "--version",                   "show version information" do
      puts NSWTopo::VERSION
      exit
    end
    parser.on "-q", "--quiet",                     "suppress non-error output" do
      $stdout = File.open(File::NULL, "w")
    end
    parser.on "-c", "--config   <path>", Pathname, "load extra configuration" do |path|
      NSWTopo::Config.extra_path = path
    end
    parser.on "-h", "--help",                      "show general help" do
      puts $stdout.tty? ? ansi[parser] : plain[parser]
      doc = Pathname(__dir__).parent / "docs" / "README.md"
      puts nil, RDoc::Markdown.parse(doc.read encoding: Encoding::UTF_8).accept(HelpFormatter.new $stdout.tty?)
      exit
    end
  end
  base_parser.order!

  command, options = ARGV.shift, Hash.new
  command_parser = OptionParser.new do |parser|
    parser.separator "  options:"

    case command
    when "init"
      parser.banner = <<~EOF
        *nswtopo* *init* - initialise map bounds and scale
          usage: _nswtopo_ _init_ [~options~] <map.tgz>
      EOF
      parser.on "-s", "--scale       <scale>",        PositiveInt,  "scale of map (default 25000)"
      parser.on "-b", "--bounds      <bounds.kml>",   Pathname,     "bounds for map as KML or GPX file"
      parser.on "-c", "--coords      <x1,y1,...>",    CoordList,    "bounds for map as one or more WGS84",
                                                                    "longitude/latitude pairs" 
      parser.on "-d", "--dimensions  <width,height>", Dimensions,   "dimensions of map in mm"
      parser.on "-m", "--margins     <x[,y]>",        Margins,      "map margins in mm"
      parser.on "-r", "--rotation    <rotation>",     Rotation,     "map rotation angle in clockwise",
                                                                    "degrees, 'auto' or 'magnetic'"
      parser.on "-o", "--overwrite",                                "overwrite existing map file"

    when "info"
      parser.banner = <<~EOF
        *nswtopo* *info* - display map layers and metadata
        usage: _nswtopo_ _info_ [~options~] <map.tgz>
      EOF
      parser.on "-e", "--empty", "show empty layers"
      parser.on "-j", "--json",  "show map bounds as GeoJSON string"
      parser.on "-p", "--proj",  "show map projection as a proj string"

    when "add"
      parser.banner = <<~EOF
        *nswtopo* *add* - add named map layer
          usage: _nswtopo_ _add_ [~options~] <map.tgz> <layer> [<layer> ...]
      EOF
      parser.on "-r", "--resolution  <resolution>", PositiveFloat, "raster layer resolution in metres"
      parser.on "-p", "--path        <path>",       Pathname,      "source data path for layer"
      parser.on "-a", "--after       <layer>",                     "insert after specified layer"
      parser.on "-b", "--before      <layer>",                     "insert before specified layer"
      parser.on "-c", "--replace     <layer>",                     "replace specified layer"
      parser.on "-o", "--overwrite",                               "overwrite layer if it already exists"

    when "contours"
      parser.banner = <<~EOF
        *nswtopo* *contours* - add contours from elevation data
          usage: _nswtopo_ _contours_ [~options~] <map.tgz> <dem.zip>
      EOF
      parser.on "-i", "--interval      <interval>",   PositiveInt,   "contour interval in metres (default %s)" % NSWTopo::Contour::DEFAULTS["interval"]
      parser.on "-x", "--index         <index>",      PositiveInt,   "index interval in metres"
      parser.on "-a", "--auxiliary",                                 "show auxiliary contours"
      parser.on "-s", "--smooth        <radius>",     NonNegFloat,   "DEM smoothing radius in mm (default %s)" % NSWTopo::Contour::DEFAULTS["smooth"]
      parser.on "-t", "--thin",                                      "thin intermediate contours in steep areas"
      parser.on "-d", "--density       <density>",    PositiveFloat, "thinning threshold (default %s lines/mm)" % NSWTopo::Contour::DEFAULTS["density"]
      # parser.on "-m", "--min-length    <length>",     PositiveFloat, "minimum length before contour thinning in mm"
      parser.on       "--no-depression",                             "don't show or clean depression contours"
      parser.on "-k", "--knolls        <size>",       NonNegFloat,   "minimum knoll size in mm (default %s)" % NSWTopo::Contour::DEFAULTS["knolls"]
      parser.on "-a", "--after         <layer>",                     "insert after specified layer"
      parser.on "-b", "--before        <layer>",                     "insert before specified layer"
      parser.on "-c", "--replace       <layer>",                     "replace specified layer"
      parser.on       "--stroke        <colour>",     Colour,        "stroke colour (name or RGB triplet)"
      parser.on       "--stroke-width  <width>",      PositiveFloat, "stroke width in mm (default %s)" % NSWTopo::Contour::DEFAULTS["stroke-width"]
      parser.on       "--fill          <colour>",     Colour,        "label colour (defaults to stroke colour)"
      parser.on "-r", "--resolution    <resolution>", PositiveFloat, "DEM processing resolution in metres"

    when "spot-heights"
      parser.banner = <<~EOF
        *nswtopo* *spot-heights* - add spot heights from elevation data
          usage: _nswtopo_ _spot-heights_ [~options~] <map.tgz> <dem.zip>
      EOF
      parser.on "-s", "--smooth      <radius>",         NonNegFloat,        "DEM smoothing radius in mm (default %s)" % NSWTopo::Spot::DEFAULTS["smooth"]
      parser.on       "--spacing     <spacing>",        PositiveFloat,      "minimum spot spacing in mm (default %i)" % NSWTopo::Spot::DEFAULTS["spacing"]
      parser.on "-p", "--prefer      <knolls|saddles>", %w[knolls saddles], "preferred spot locations"
      parser.on "-e", "--extent      <extent>",         PositiveFloat,      "minimum feature extent in mm (default %i)" % NSWTopo::Spot::DEFAULTS["extent"]
      parser.on "-a", "--after       <layer>",                              "insert after specified layer"
      parser.on "-b", "--before      <layer>",                              "insert before specified layer"
      parser.on "-c", "--replace     <layer>",                              "replace specified layer"
      parser.on "-r", "--resolution  <resolution>",     PositiveFloat,      "DEM processing resolution in metres"

    when "relief"
      parser.banner = <<~EOF
        *nswtopo* *relief* - add shaded relief
          usage: _nswtopo_ _relief_ [~options~] <map.tgz> <dem.zip>
      EOF
      parser.on "-r", "--resolution  <resolution>", PositiveFloat, "resolution in metres"
      parser.on "-o", "--opacity     <opacity>",    Opacity,       "opacity (default %s)" % NSWTopo::Relief::DEFAULTS["opacity"]
      parser.on       "--shade       <colour>",     Colour,        "shade colour (RGB triplet, default %s)" % NSWTopo::Relief::DEFAULTS["shade"]
      parser.on "-a", "--altitude    <altitude>",   AltitudeAngle, "altitude angle in degrees (default %i)" % NSWTopo::Relief::DEFAULTS["altitude"]
      parser.on "-z", "--azimuth     <azimuth>",    Float,         "azimuth in degrees (default %i)" % NSWTopo::Relief::DEFAULTS["azimuth"]
      parser.on "-s", "--sources     <sources>",    PositiveInt,   "number of light sources (default %i)" % NSWTopo::Relief::DEFAULTS["sources"]
      parser.on "-y", "--yellow      <fraction>",   Opacity,       "yellow illumination as a fraction",
                                                                   "of shading (default %s)" % NSWTopo::Relief::DEFAULTS["yellow"]
      parser.on "-f", "--factor      <factor>",     PositiveFloat, "exaggeration factor (default %s)" % NSWTopo::Relief::DEFAULTS["factor"]

    when "grid"
      parser.banner = <<~EOF
        *nswtopo* *grid* - add UTM grid
          usage: _nswtopo_ _grid_ [~options~] <map.tgz>
      EOF
      parser.on "-i", "--interval      <interval>", PositiveFloat, "interval between grid lines in",
                                                                   "metres (default %i)" % NSWTopo::Grid::DEFAULTS["interval"]
      parser.on "-u", "--unlabeled",                               "don't add grid labels"
      parser.on       "--stroke-width  <width>",    PositiveFloat, "stroke width in mm (default %s)" % NSWTopo::Grid::DEFAULTS["stroke-width"]

    when "declination"
      parser.banner = <<~EOF
        *nswtopo* *declination* - add magnetic declination lines
          usage: _nswtopo_ _declination_ [~options~] <map.tgz>
      EOF
      parser.on "-a", "--angle    <angle>",   Float,         "magnetic declination in clockwise degrees",
                                                             "(calculated automatically by default)"
      parser.on "-s", "--spacing  <spacing>", PositiveFloat, "spacing of lines in mm (default %i)" % NSWTopo::Declination::DEFAULTS["spacing"]
      parser.on "-o", "--offset   <offset>",  Float,         "rightwards offset of lines in mm"
      parser.on "-r", "--arrows   <arrows>",  PositiveFloat, "spacing of arrows in mm (default %i)" % NSWTopo::Declination::DEFAULTS["arrows"]
      parser.on       "--stroke   <colour>",  Colour,        "stroke colour (name or RGB triplet)"

    when "controls"
      parser.banner = <<~EOF
        *nswtopo* *controls* - add rogaine control markers
          usage: _nswtopo_ _controls_ [~options~] <map.tgz> <controls.gpx>
      EOF
      parser.on "-d", "--diameter   <diameter>",  PositiveFloat, "diameter of markers in mm (default %s)" % NSWTopo::Control::DEFAULTS["diameter"]
      parser.on "-s", "--spot",                                  "add spots at centres"
      parser.on "-c", "--colour     <colour>",    Colour,        "colour of markers and labels",
                                                                 "(name or RGB triplet)"
      parser.on "-f", "--font-size  <font-size>", PositiveFloat, "font size for labels in mm"

    when "overlay"
      parser.banner = <<~EOF
        *nswtopo* *overlay* - add KML or GPX overlay
          usage: _nswtopo_ _overlay_ [~options~] <map.tgz> <overlay.kml>
      EOF
      parser.on       "--opacity          <opacity>", Opacity,       "layer opacity (between 0 and 1)"
      parser.on       "--stroke           <colour>",  Colour,        "stroke colour (name or RGB triplet)"
      parser.on       "--stroke-width     <width>",   PositiveFloat, "stroke width in mm"
      parser.on       "--stroke-opacity   <opacity>", Opacity,       "stroke opacity"
      parser.on       "--stroke-dasharray <mm,...>",  DashArray,     "stroke dash sequence in mm"
      parser.on       "--stroke-linecap   <butt|round|square>", %w[butt round square],
                                                                     "stroke linecap value"
      parser.on       "--fill             <colour>",  Colour,        "polygon fill colour"
      parser.on       "--fill-opacity     <opacity>", Opacity,       "polygon fill opacity"
      parser.on "-s", "--simplify",                                  "apply track simplification"
      parser.on "-t", "--tolerance        <metres>",  PositiveFloat, "track simplifiction tolerance in metres",
                                                                     "(scale-appropriate value used by default)"
      parser.on "-a", "--after            <layer>",                  "insert after specified layer"
      parser.on "-b", "--before           <layer>",                  "insert before specified layer"
      parser.on "-c", "--replace          <layer>",                  "replace specified layer"

    when "delete"
      parser.banner = <<~EOF
        *nswtopo* *delete* - delete map layers
          usage: _nswtopo_ _delete_ [~options~] <map.tgz> <layer> [<layer> ...]
      EOF

    when "render"
      parser.banner = <<~EOF
        *nswtopo* *render* - render map in various formats
          usage: _nswtopo_ _render_ [~options~] <map.tgz> [<format-or-path> ...]
          formats: #{NSWTopo::Formats.extensions.sort.join ?\s}
          default: svg
      EOF
      parser.on "-p", "--ppi         <ppi>",     PositiveInt, "resolution for raster formats in pixels",
                                                              "per inch (default %i)" % NSWTopo::Formats::PPI
      parser.on "-z", "--zoom        <zoom>",    Zoom,        "maximum tile zoom (10-20, default %i)" % NSWTopo::TiledWebMap::DEFAULT_ZOOM
      parser.on "-b", "--background  <colour>",  Colour,      "background colour (name or RGB triplet)"
      parser.on "-d", "--dither",                             "use indexed colour for raster formats"
      parser.on "-w", "--worldfile",                          "save additional projection (.prj) and",
                                                              "world file (.wld) for raster formats"
      parser.on "-o", "--overwrite",                          "overwrite existing output files"
      parser.on "-e", "--external    <map.svg>", Pathname,    "render from externally edited SVG"
      parser.on "-f", "--force",                              "force regeneration of cached SVG"

    when "layers"
      parser.banner = <<~EOF
        *nswtopo* *layers* - list available map layers
          usage: _nswtopo_ _layers_ [~options~]
      EOF

    when "config"
      parser.banner = <<~EOF
        *nswtopo* *config* - configure nswtopo
          usage: _nswtopo_ _config_ [~options~] [<layer>]
      EOF
      parser.on "-d", "--delete        <name>",                      "delete configuration setting"
      parser.on "-c", "--chrome        <path>",       Pathname,      "set path for Google Chrome"
      parser.on "-p", "--path          <path>",       Pathname,      "set path for given layer"
      parser.on "-r", "--resolution    <resolution>", PositiveFloat, "set resolution for given layer"
      parser.on       "--layer-dir     <path>",       Pathname,      "set an extra layer directory"
      parser.on       "--[no-]labelling",                            "enable or disable map labelling"
      parser.on "-z", "--zlib-level    <0-9>",        ZlibLevel,     "set zlib compression level"

    when "scrape"
      parser.banner = <<~EOF
        *nswtopo* *scrape* - scrape data from an ArcGIS REST endpoint
          usage: _nswtopo_ _scrape_ [~options~] <url> <path>
      EOF
      parser.on "-l", "--layer     <layer>",       String,      "name of ArcGIS service layer"
      parser.on "-i", "--id        <id>",          Integer,     "id number of layer"
      parser.on "-w", "--where     <where>",       String,      "filtering clause"
      parser.on "-c", "--coords    <x0,y0,x1,y1>", CoordList,   "WGS84 coordinates of bounding box corners"
      parser.on "-n", "--name      <name>",        /^\w+$/,     "name of saved layer"
      parser.on "-f", "--fields    <field,...>",   FieldList,   "comma-separated list of fields"
      parser.on "-d", "--decode",                               "convert coded values where possible"
      parser.on "-e", "--epsg      <number>",      PositiveInt, "EPSG number for reprojection"
      parser.on "-p", "--paginate  <number>",      PositiveInt, "number of records per request"
      parser.on       "--concat",                               "collect all features before saving"
      parser.on "-u", "--unique    <field>",       String,      "field for counting map-only features"

    when "inspect"
      parser.banner = <<~EOF
        *nswtopo* *inspect* - inspect data from an ArcGIS REST endpoint or local data source
          usage: _nswtopo_ inspect [~options~] <url-or-path>
      EOF
      parser.on "-l", "--layer      <layer>",       String,          "name of layer"
      parser.on "-i", "--id         <id>",          Integer,         "id number of layer"
      parser.on "-w", "--where      <where>",       String,          "filtering clause"
      parser.on "-c", "--coords     <x0,y0,x1,y1>", CoordList,       "WGS84 coordinates of bounding box corners"
      parser.on "-f", "--fields     <field,...>",   FieldList,       "comma-separated list of fields"
      parser.on "-d", "--decode",                                    "convert coded values where possible"
      parser.on       "--codes",                                     "show coded values for an ArcGIS Layer"
      parser.on       "--countwise",                                 "sort fields by count instead of value"

    when nil
      raise OptionParser::MissingArgument, "no command specified"

    else
      raise OptionParser::InvalidArgument, command
    end

    parser.on "-h", "--help",  "show help for this command" do
      puts $stdout.tty? ? ansi[parser] : plain[parser]
      doc = Pathname(__dir__).parent / "docs" / "#{command}.md"
      puts nil, RDoc::Markdown.parse(doc.read encoding: Encoding::UTF_8).accept(HelpFormatter.new $stdout.tty?)
    rescue Errno::ENOENT
    ensure
      exit
    end
  rescue OptionParser::ParseError => error
    warn ansi[base_parser] if $stderr.tty?
    raise error.message
  end
  command_parser.parse! into: options

  case command
  when "layers"
    raise OptionParser::NeedlessArgument, ARGV if ARGV.any?
    NSWTopo.layers options
    exit
  when "config"
    layer = ARGV.shift
    raise OptionParser::NeedlessArgument, ARGV if ARGV.any?
    NSWTopo.config *layer, **options
    exit
  when "scrape"
    url, path = ARGV.shift, ARGV.shift
    raise OptionParser::MissingArgument, "no URL specified" unless url
    raise OptionParser::MissingArgument, "no path specified" unless path
    raise OptionParser::NeedlessArgument, ARGV if ARGV.any?
    path = Pathname(path).expand_path
    raise OptionParser::InvalidArgument, "invalid path: #{path}" unless path.parent.directory?
    raise OptionParser::InvalidOption, "can't specify both --id and --layer" if options[:id] && options[:layer]
    NSWTopo.scrape url, path, **options
    exit
  when "inspect"
    url_or_path = ARGV.shift
    raise OptionParser::MissingArgument, "no URL or path specified" unless url_or_path
    raise OptionParser::NeedlessArgument, ARGV if ARGV.any?
    [%i[where codes], %i[fields codes], %i[decode codes], %i[id layer]].each do |flags|
      raise OptionParser::InvalidOption, "can't have --%s with --%s" % flags if options.values_at(*flags).all?
    end
    raise OptionParser::InvalidOption, "--countwise requires --fields" if options[:countwise] && !options[:fields]
    raise OptionParser::InvalidOption, "--decode requires --fields" if options[:decode] && !options[:fields]
    NSWTopo.inspect url_or_path, **options
    exit
  end

  raise OptionParser::MissingArgument, "no map path specified" if ARGV.empty?
  tgz_path = Pathname(ARGV.shift)

  in_path = case command
  when "init"
    raise "#{tgz_path} already exists" if !options.delete(:overwrite) && tgz_path.exist?
  else
    raise "no such file #{tgz_path}" unless tgz_path.exist?
    raise "#{tgz_path} is not a file" unless tgz_path.file?
    tgz_path
  end

  command = command.tr ?-, ?_
  arity, args = NSWTopo.method(command).arity, ARGV.length + 2

  case
  when arity >= 0 && args > arity
    raise OptionParser::NeedlessArgument, ARGV.last(args - arity).join(?\s)
  when arity >= 0 ? args < arity : args + arity + 1 < 0
    raise OptionParser::MissingArgument
  end

  error = nil
  NSWTopo::Archive.open(tgz_path, *in_path) do |archive|
    NSWTopo.send command, archive, *ARGV, options
  rescue NSWTopo::PartialFailureError => error
  end
  raise error.message if error
rescue OptionParser::ParseError => error
  warn ansi[command_parser] if $stderr.tty?
  log_abort error.message
rescue Interrupt
  abort $stderr.tty? ? "\r\e[K\e[31mnswtopo:\e[0m interrupted" : "nswtopo: interrupted"
rescue RuntimeError => error
  log_abort error.message
end
